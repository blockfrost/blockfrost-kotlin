/**
 * Blockfrost.io ~ API Documentation
 *
 * Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Tokens  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  <table>   <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>   <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>   <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>   <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr> </table>  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields (except `server_time`) are in seconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \"status_code\": 403,   \"error\": \"Forbidden\",   \"message\": \"Invalid project token.\" } ``` ## Limits   There are two types of limits we are enforcing:   The first depends on your plan and is the number of request we allow per day. We defined the day from midnight to midnight of UTC time.   The second is rate limiting. We limit an end user, distinguished by IP address, to 10 requests per second. On top of that, we allow  each user to send burst of 500 requests, which cools off at rate of 10 requests per second. In essence, a user is allowed to make another  whole burst after (currently) 500/10 = 50 seconds. E.g. if a user attemtps to make a call 3 seconds after whole burst, 30 requests will be processed.  We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.   ## SDKs  We support a number of SDKs that will help you in developing your application on top of Blockfrost.  <table>   <tr><td><b>Programming language</b></td><td><b>SDK</b></td></tr>   <tr><td>JavaScript</td><td><a href=\"https://github.com/blockfrost/blockfrost-js\">blockfrost-js</a></tr>   <tr><td>Haskell</td><td><a href=\"https://github.com/blockfrost/blockfrost-haskell\">blockfrost-haskell</a></tr> </table> 
 *
 * The version of the OpenAPI document: 0.1.27
 * Contact: contact@blockfrost.io
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.api

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.BlockfrostConfig
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.models.*
import org.openapitools.client.retrofit.CardanoTransactionsApi as CardanoTransactionsApiRetrofit

open class CardanoTransactionsApi(config: BlockfrostConfig = BlockfrostConfig.defaultConfig) : ApiClient(config) {
    val api by lazy {
        createService(CardanoTransactionsApiRetrofit::class.java)
    }

    /**
     * Specific transaction
     * Return content of the requested transaction.
     * @param hash Hash of the requested transaction
     * @return TxContent
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransaction(
        hash: kotlin.String
    ): TxContent? = withContext(Dispatchers.IO) {
        api.getTransaction(hash = hash).body()
    }


    /**
     * Transaction delegation certificates
     * Obtain information about delegation certificates of a specific transaction.
     * @param hash Hash of the requested transaction.
     * @return kotlin.collections.List<TxContentDelegation>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionDelegations(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentDelegation> = withContext(Dispatchers.IO) {
        api.getTransactionDelegations(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction metadata
     * Obtain the transaction metadata.
     * @param hash Hash of the requested transaction
     * @return kotlin.collections.List<TxContentMetadata>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionMetadata(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentMetadata> = withContext(Dispatchers.IO) {
        api.getTransactionMetadata(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction metadata in CBOR
     * Obtain the transaction metadata in CBOR.
     * @param hash Hash of the requested transaction
     * @return kotlin.collections.List<TxContentMetadataCbor>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionMetadataCbor(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentMetadataCbor> = withContext(Dispatchers.IO) {
        api.getTransactionMetadataCbor(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction MIRs
     * Obtain information about Move Instantaneous Rewards (MIRs) of a specific transaction.
     * @param hash Hash of the requested transaction.
     * @return kotlin.collections.List<TxContentMir>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionMirs(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentMir> = withContext(Dispatchers.IO) {
        api.getTransactionMirs(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction stake pool retirement certificates
     * Obtain information about stake pool retirements within a specific transaction.
     * @param hash Hash of the requested transaction
     * @return kotlin.collections.List<TxContentPoolRetire>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionPoolRetires(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentPoolRetire> = withContext(Dispatchers.IO) {
        api.getTransactionPoolRetires(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction stake pool registration and update certificates
     * Obtain information about stake pool registration and update certificates of a specific transaction.
     * @param hash Hash of the requested transaction
     * @return kotlin.collections.List<TxContentPoolCert>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionPoolUpdates(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentPoolCert> = withContext(Dispatchers.IO) {
        api.getTransactionPoolUpdates(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction redeemers
     * Obtain the transaction redeemers.
     * @param hash Hash of the requested transaction
     * @return kotlin.collections.List<TxContentRedeemer>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionRedeemers(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentRedeemer> = withContext(Dispatchers.IO) {
        api.getTransactionRedeemers(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction stake addresses certificates
     * Obtain information about (de)registration of stake addresses within a transaction.
     * @param hash Hash of the requested transaction.
     * @return kotlin.collections.List<TxContentStakeAddr>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionStakes(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentStakeAddr> = withContext(Dispatchers.IO) {
        api.getTransactionStakes(hash = hash).body() ?: emptyList()
    }


    /**
     * Transaction UTXOs
     * Return the inputs and UTXOs of the specific transaction.
     * @param hash Hash of the requested transaction
     * @return TxContentUtxo
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionUtxos(
        hash: kotlin.String
    ): TxContentUtxo? = withContext(Dispatchers.IO) {
        api.getTransactionUtxos(hash = hash).body()
    }


    /**
     * Transaction withdrawal
     * Obtain information about withdrawals of a specific transaction.
     * @param hash Hash of the requested transaction.
     * @return kotlin.collections.List<TxContentWithdrawal>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun getTransactionWithdrawals(
        hash: kotlin.String
    ): kotlin.collections.List<TxContentWithdrawal> = withContext(Dispatchers.IO) {
        api.getTransactionWithdrawals(hash = hash).body() ?: emptyList()
    }


    /**
     * Submit a transaction
     * Submit an already serialized transaction to the network.
     * @param contentType
     * @return kotlin.String
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    open suspend fun submitTransaction(
        contentType: kotlin.String
    ): kotlin.String? = withContext(Dispatchers.IO) {
        api.submitTransaction(contentType = contentType).body()
    }


}
